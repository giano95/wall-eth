{
  "address": "0xab3fc5eAd56b9916c715119ac5f551CC3aBe2709",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        },
        {
          "internalType": "contract AutomationRegistryInterface",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tradedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_chainlinkOracle",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_getPriceJobId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_getPriceFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_truflationOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AutoApproveDisabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "NoCounterIDAssociated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentTimeStamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTimeStamp",
          "type": "uint256"
        }
      ],
      "name": "UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "ConcatenatedURL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "FullfillPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        }
      ],
      "name": "SwapTokensForTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "TradeOccured",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "botIdToBotObj",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTimeStamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "counter",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "botIdToUpkeepId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cacheInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderSize",
          "type": "uint256"
        }
      ],
      "name": "createNewBotInstance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTier",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "fulfillPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fundingAmount",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fundingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_getPriceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_getPriceJobId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_link",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_registrar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_registry",
      "outputs": [
        {
          "internalType": "contract AutomationRegistryInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_stakedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_stakedTokenSymbol",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_tradedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_tradedTokenSymbol",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_truflationOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "fundingAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "orderInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderSize",
          "type": "uint256"
        }
      ],
      "name": "registerNewAutomation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToBotId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "botId",
          "type": "uint256"
        }
      ],
      "name": "requestPriceAndSwapToken",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakingAmount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tradingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb25330d6d5636112d7eeee4dfb5be7aa2d35993a24fd71ba4e18f69031492878",
  "receipt": {
    "to": null,
    "from": "0x81617079A419ab4562b29A92181402BdF389a1fA",
    "contractAddress": "0xab3fc5eAd56b9916c715119ac5f551CC3aBe2709",
    "transactionIndex": 79,
    "gasUsed": "4974908",
    "logsBloom": "0x
    "blockHash": "0x042d55fbf2e9f2762e27c400628d55405694b845e732daaf811a72f60959586a",
    "transactionHash": "0xb25330d6d5636112d7eeee4dfb5be7aa2d35993a24fd71ba4e18f69031492878",
    "logs": [],
    "blockNumber": 7977756,
    "cumulativeGasUsed": "20520832",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x9806cf6fBc89aBF286e8140C42174B94836e36F2",
    "0x02777053d6764996e594c3E88AF1D58D5363a2e6",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564",
    "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
    "0xD189e75a64989E4d2cDBAefcDDB4BD931e299121",
    "0x3839613362646238626464623433303861336633336233666432313564613035",
    "100000000000000000",
    "0x0F7C4A8D7e911E6A6d0b3aAAB6a833601ccE65cC"
  ],
  "numDeployments": 6,
  "solcInputHash": "6d892bffdfa0342a860f75a7c515bb92",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"contract AutomationRegistryInterface\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tradedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainlinkOracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_getPriceJobId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_getPriceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_truflationOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AutoApproveDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"NoCounterIDAssociated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimeStamp\",\"type\":\"uint256\"}],\"name\":\"UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"ConcatenatedURL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"FullfillPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"name\":\"SwapTokensForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"TradeOccured\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"botIdToBotObj\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"botIdToUpkeepId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cacheInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderSize\",\"type\":\"uint256\"}],\"name\":\"createNewBotInstance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTier\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"fulfillPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundingAmount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_getPriceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_getPriceJobId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_link\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_registrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_registry\",\"outputs\":[{\"internalType\":\"contract AutomationRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_stakedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_stakedTokenSymbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_tradedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_tradedTokenSymbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_truflationOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"fundingAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"orderInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderSize\",\"type\":\"uint256\"}],\"name\":\"registerNewAutomation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToBotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"botId\",\"type\":\"uint256\"}],\"name\":\"requestPriceAndSwapToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"name\":\"swapTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TradingBotV3.sol\":\"TradingBotV3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface1_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice config of the registry\\n * @dev only used in params and return values\\n * @member paymentPremiumPPB payment premium rate oracles receive on top of\\n * being reimbursed for gas, measured in parts per billion\\n * @member flatFeeMicroLink flat fee paid to oracles for performing upkeeps,\\n * priced in MicroLink; can be used in conjunction with or independently of\\n * paymentPremiumPPB\\n * @member blockCountPerTurn number of blocks each oracle has during their turn to\\n * perform upkeep before it will be the next keeper's turn to submit\\n * @member checkGasLimit gas limit when checking for upkeep\\n * @member stalenessSeconds number of seconds that is allowed for feed data to\\n * be stale before switching to the fallback pricing\\n * @member gasCeilingMultiplier multiplier to apply to the fast gas feed price\\n * when calculating the payment ceiling for keepers\\n * @member minUpkeepSpend minimum LINK that an upkeep must spend before cancelling\\n * @member maxPerformGas max executeGas allowed for an upkeep on this registry\\n * @member fallbackGasPrice gas price used if the gas price feed is stale\\n * @member fallbackLinkPrice LINK price used if the LINK price feed is stale\\n * @member transcoder address of the transcoder contract\\n * @member registrar address of the registrar contract\\n */\\nstruct Config {\\n  uint32 paymentPremiumPPB;\\n  uint32 flatFeeMicroLink; // min 0.000001 LINK, max 4294 LINK\\n  uint24 blockCountPerTurn;\\n  uint32 checkGasLimit;\\n  uint24 stalenessSeconds;\\n  uint16 gasCeilingMultiplier;\\n  uint96 minUpkeepSpend;\\n  uint32 maxPerformGas;\\n  uint256 fallbackGasPrice;\\n  uint256 fallbackLinkPrice;\\n  address transcoder;\\n  address registrar;\\n}\\n\\n/**\\n * @notice state of the registry\\n * @dev only used in params and return values\\n * @member nonce used for ID generation\\n * @member ownerLinkBalance withdrawable balance of LINK by contract owner\\n * @member expectedLinkBalance the expected balance of LINK of the registry\\n * @member numUpkeeps total number of upkeeps on the registry\\n */\\nstruct State {\\n  uint32 nonce;\\n  uint96 ownerLinkBalance;\\n  uint256 expectedLinkBalance;\\n  uint256 numUpkeeps;\\n}\\n\\ninterface AutomationRegistryBaseInterface {\\n  function registerUpkeep(\\n    address target,\\n    uint32 gasLimit,\\n    address admin,\\n    bytes calldata checkData\\n  ) external returns (uint256 id);\\n\\n  function performUpkeep(uint256 id, bytes calldata performData) external returns (bool success);\\n\\n  function cancelUpkeep(uint256 id) external;\\n\\n  function addFunds(uint256 id, uint96 amount) external;\\n\\n  function setUpkeepGasLimit(uint256 id, uint32 gasLimit) external;\\n\\n  function getUpkeep(uint256 id)\\n    external\\n    view\\n    returns (\\n      address target,\\n      uint32 executeGas,\\n      bytes memory checkData,\\n      uint96 balance,\\n      address lastKeeper,\\n      address admin,\\n      uint64 maxValidBlocknumber,\\n      uint96 amountSpent\\n    );\\n\\n  function getActiveUpkeepIDs(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  function getKeeperInfo(address query)\\n    external\\n    view\\n    returns (\\n      address payee,\\n      bool active,\\n      uint96 balance\\n    );\\n\\n  function getState()\\n    external\\n    view\\n    returns (\\n      State memory,\\n      Config memory,\\n      address[] memory\\n    );\\n}\\n\\n/**\\n * @dev The view methods are not actually marked as view in the implementation\\n * but we want them to be easily queried off-chain. Solidity will not compile\\n * if we actually inherit from this interface, so we document it here.\\n */\\ninterface AutomationRegistryInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId, address from)\\n    external\\n    view\\n    returns (\\n      bytes memory performData,\\n      uint256 maxLinkPayment,\\n      uint256 gasLimit,\\n      int256 gasWei,\\n      int256 linkEth\\n    );\\n}\\n\\ninterface AutomationRegistryExecutableInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId, address from)\\n    external\\n    returns (\\n      bytes memory performData,\\n      uint256 maxLinkPayment,\\n      uint256 gasLimit,\\n      uint256 adjustedGasWei,\\n      uint256 linkEth\\n    );\\n}\\n\",\"keccak256\":\"0xc61d747194f2efd476204f9cf138f4028166d4723960fd66c7d316625ebe3ff6\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/TradingBotV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// -- IMPORTS --\\nimport {AutomationRegistryInterface, State, Config} from '@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface1_2.sol';\\nimport {LinkTokenInterface} from '@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol'; // Just a simple contracts that keep counts of how many times it's called\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@chainlink/contracts/src/v0.8/ChainlinkClient.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport './TruflationClient.sol';\\n\\n// -- INTERFACES --\\ninterface KeeperRegistrarInterface {\\n    function register(\\n        string memory name,\\n        bytes calldata encryptedEmail,\\n        address upkeepContract,\\n        uint32 gasLimit,\\n        address adminAddress,\\n        bytes calldata checkData,\\n        uint96 amount,\\n        uint8 source,\\n        address sender\\n    ) external;\\n}\\n\\nstruct BotObj {\\n    address owner;\\n    uint256 orderInterval; // interval in seconds in which the bot swap 'amount' DAI for WETH\\n    uint256 orderSize;\\n    uint256 lastTimeStamp;\\n    uint256 counter; // count how many times we trade\\n}\\n\\nfunction stringToBytes32(string memory source) pure returns (bytes32 result) {\\n    bytes memory tempEmptyStringTest = bytes(source);\\n    if (tempEmptyStringTest.length == 0) {\\n        return 0x0;\\n    }\\n\\n    assembly {\\n        result := mload(add(source, 32))\\n    }\\n}\\n\\nfunction bytes32ToString(bytes32 _bytes32) pure returns (string memory) {\\n    uint8 i = 0;\\n    while (i < 32 && _bytes32[i] != 0) {\\n        i++;\\n    }\\n    bytes memory bytesArray = new bytes(i);\\n    for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n        bytesArray[i] = _bytes32[i];\\n    }\\n    return string(bytesArray);\\n}\\n\\n// -- CONTRACTS --\\ncontract TradingBotV3 is ReentrancyGuard, ChainlinkClient {\\n    using Counters for Counters.Counter;\\n    using Chainlink for Chainlink.Request;\\n\\n    // -- CONSTANTS --\\n    uint24 public constant feeTier = 3000;\\n    uint8 public constant swapSlippage = 10; // 10%\\n    uint256 public constant cacheInterval = 60 * 60 * 24; // 1 day\\n\\n    // -- VARIABLES --\\n    Counters.Counter private _botIdCounter; // Counter ID\\n\\n    mapping(uint256 => BotObj) public botIdToBotObj;\\n    mapping(uint256 => uint256) public botIdToUpkeepId;\\n    mapping(bytes32 => uint256) public requestIdToBotId;\\n\\n    LinkTokenInterface public immutable i_link;\\n    address public immutable i_registrar;\\n    AutomationRegistryInterface public immutable i_registry;\\n    bytes4 registerSig = KeeperRegistrarInterface.register.selector;\\n\\n    ISwapRouter public immutable i_swapRouter;\\n    address public immutable i_stakedToken;\\n    address public immutable i_tradedToken;\\n    bytes32 public immutable i_stakedTokenSymbol;\\n    bytes32 public immutable i_tradedTokenSymbol;\\n    mapping(address => uint256) public stakingBalance;\\n    mapping(address => uint256) public tradingBalance;\\n    mapping(address => uint256) public fundingBalance;\\n\\n    bytes32 public immutable i_getPriceJobId;\\n    uint256 public immutable i_getPriceFee;\\n\\n    address public i_truflationOracle;\\n\\n    // -- EVENTS --\\n    event FullfillPrice(bytes32 requestId, uint256 price);\\n    event SwapTokensForTokens(address sender, uint amountIn, uint amountOutMinimum);\\n    event ConcatenatedURL(string url);\\n    event TradeOccured(address indexed receiver, uint256 amountIn, uint256 amountOut);\\n\\n    // -- ERRORS --\\n    error UpkeepNotNeeded(uint256 currentTimeStamp, uint256 lastTimeStamp);\\n    error AutoApproveDisabled();\\n    error NoCounterIDAssociated(bytes32 requestId);\\n\\n    // -- CONSTRUCTOR --\\n    constructor(\\n        LinkTokenInterface _link,\\n        address _registrar,\\n        AutomationRegistryInterface _registry,\\n        ISwapRouter _swapRouter,\\n        address _stakedToken,\\n        address _tradedToken,\\n        address _chainlinkOracle,\\n        bytes32 _getPriceJobId,\\n        uint256 _getPriceFee,\\n        address _truflationOracle\\n    ) {\\n        // GOERLI: 0x326C977E6efc84E512bB9C30f76E30c160eD06FB\\n        i_link = _link;\\n        // GOERLI: 0x9806cf6fBc89aBF286e8140C42174B94836e36F2\\n        i_registrar = _registrar;\\n        // GOERLI: 0x02777053d6764996e594c3E88AF1D58D5363a2e6\\n        i_registry = _registry;\\n\\n        // Initialize Uniswap Router\\n        i_swapRouter = _swapRouter;\\n\\n        // Set Tokens addresses\\n        i_stakedToken = _stakedToken;\\n        i_tradedToken = _tradedToken;\\n        i_stakedTokenSymbol = stringToBytes32(ERC20(_stakedToken).symbol());\\n        i_tradedTokenSymbol = stringToBytes32(ERC20(_tradedToken).symbol());\\n\\n        // Chainlink Client stuff\\n        setChainlinkToken(address(_link));\\n        setChainlinkOracle(_chainlinkOracle);\\n        i_getPriceJobId = _getPriceJobId;\\n        i_getPriceFee = _getPriceFee;\\n\\n        // Truflation contract\\n        i_truflationOracle = _truflationOracle;\\n    }\\n\\n    // -- METHODS --\\n    function createNewBotInstance(\\n        address owner,\\n        uint256 orderInterval,\\n        uint256 orderSize\\n    ) public returns (uint256) {\\n        uint256 botId = _botIdCounter.current();\\n\\n        _botIdCounter.increment();\\n\\n        // initialize an empty struct and then update it\\n        BotObj memory botObj;\\n        botObj.owner = owner;\\n        botObj.orderInterval = orderInterval;\\n        botObj.orderSize = orderSize;\\n        botObj.lastTimeStamp = block.timestamp;\\n        botObj.counter = 0;\\n        botIdToBotObj[botId] = botObj;\\n\\n        return botId;\\n    }\\n\\n    function registerNewAutomation(\\n        string memory name,\\n        uint32 gasLimit, // 999999\\n        uint96 fundingAmount, // 5 LINK\\n        uint256 orderInterval,\\n        uint256 orderSize\\n    ) public {\\n        require(fundingAmount >= 5000000000000000000, 'minimum fundingAmount is 5 LINK');\\n        require(orderInterval >= 60, 'minimum orderInterval is 60 seconds');\\n        require(orderSize >= 100000000000000, 'minimum orderSize is 0,0001 stakedToken');\\n        require(fundingBalance[msg.sender] >= fundingAmount, 'your funding balance is < of your fundingAmount');\\n\\n        (State memory state, Config memory _c, address[] memory _k) = i_registry.getState();\\n        uint256 oldNonce = state.nonce;\\n\\n        // Create a new bot instance and pass his Id as the checkData\\n        uint256 botId = createNewBotInstance(msg.sender, orderInterval, orderSize);\\n        bytes memory checkData = abi.encodePacked(botId);\\n        bytes memory payload = abi.encode(\\n            name,\\n            '0x', // bytes calldata encryptedEmail\\n            address(this), // address upkeepContract\\n            gasLimit,\\n            address(msg.sender), // address adminAddress\\n            checkData,\\n            fundingAmount, // (N.B.) minimum 5.0 LINK\\n            0, // uint8 source\\n            address(this)\\n        );\\n\\n        // Update the funds balance\\n        fundingBalance[msg.sender] = fundingBalance[msg.sender] - fundingAmount;\\n\\n        // Transfer Link and call the registrar\\n        i_link.transferAndCall(i_registrar, fundingAmount, bytes.concat(registerSig, payload));\\n        (state, _c, _k) = i_registry.getState();\\n        uint256 newNonce = state.nonce;\\n\\n        if (newNonce == oldNonce + 1) {\\n            uint256 upkeepId = uint256(\\n                keccak256(abi.encodePacked(blockhash(block.number - 1), address(i_registry), uint32(oldNonce)))\\n            );\\n            // Set the upkeepID\\n            botIdToUpkeepId[botId] = upkeepId;\\n        } else {\\n            revert AutoApproveDisabled();\\n        }\\n    }\\n\\n    function checkConditions(uint256 botId) internal view returns (bool upkeepNeeded) {\\n        BotObj memory botObj = botIdToBotObj[botId];\\n\\n        bool isIntervalElapsed = (block.timestamp - botObj.lastTimeStamp) > botObj.orderInterval;\\n        bool isUserStakingBalanceZero = stakingBalance[botObj.owner] == 0;\\n\\n        upkeepNeeded = isIntervalElapsed && !isUserStakingBalanceZero;\\n    }\\n\\n    function checkUpkeep(bytes calldata checkData) external view returns (bool upkeepNeeded, bytes memory performData) {\\n        // decode the checkData and get the botId\\n        uint256 botId = abi.decode(checkData, (uint256));\\n\\n        upkeepNeeded = checkConditions(botId);\\n\\n        performData = checkData;\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external {\\n        // get the botId and botObj by decoding the checkData\\n        uint256 botId = abi.decode(performData, (uint256));\\n        BotObj storage botObj = botIdToBotObj[botId];\\n\\n        // Check if this function is called by the checkUpKeep function or a possible attacker by re-checking the Conditions\\n        if (!checkConditions(botId)) {\\n            revert UpkeepNotNeeded(block.timestamp, botObj.lastTimeStamp);\\n        }\\n\\n        // Re-Set the last time stamp and increment the counter\\n        botObj.lastTimeStamp = block.timestamp;\\n        botObj.counter = botObj.counter + 1;\\n\\n        // If the inflation is older update it\\n        if ((block.timestamp - TruflationClient(i_truflationOracle).lastTimeStamp()) > cacheInterval) {\\n            // approve truflation oracle to spend link\\n            ERC20(address(i_link)).approve(i_truflationOracle, TruflationClient(i_truflationOracle).fee());\\n\\n            // Update the funds balance\\n            fundingBalance[botObj.owner] = fundingBalance[botObj.owner] - TruflationClient(i_truflationOracle).fee();\\n\\n            // transfer and request inflation\\n            TruflationClient(i_truflationOracle).transferAndRequestInflation();\\n        }\\n\\n        // Update the funds balance\\n        fundingBalance[botObj.owner] = fundingBalance[botObj.owner] - i_getPriceFee;\\n\\n        // Trade!\\n        requestPriceAndSwapToken(botId);\\n    }\\n\\n    function stake(uint256 stakingAmount) public {\\n        require(stakingAmount > 0, 'amount should be > 0');\\n\\n        // Transfer the specified amount of DAI to this contract\\n        TransferHelper.safeTransferFrom(i_stakedToken, msg.sender, address(this), stakingAmount);\\n\\n        // Update staking balance\\n        stakingBalance[msg.sender] = stakingBalance[msg.sender] + stakingAmount;\\n    }\\n\\n    function unstake() public nonReentrant {\\n        uint256 balance = stakingBalance[msg.sender];\\n\\n        // Balance should be > 0\\n        require(balance > 0, 'Your stake balance is 0, you have nothing to withdraw');\\n\\n        // Reset staking balance\\n        stakingBalance[msg.sender] = 0;\\n\\n        // Transfer Dai tokens to the sender\\n        TransferHelper.safeTransfer(i_stakedToken, msg.sender, balance);\\n    }\\n\\n    function fund(uint256 fundingAmount) public {\\n        require(fundingAmount > 0, 'amount should be > 0');\\n\\n        // Transfer the specified amount of LINK to this contract\\n        TransferHelper.safeTransferFrom(address(i_link), msg.sender, address(this), fundingAmount);\\n\\n        // Update staking balance\\n        fundingBalance[msg.sender] = fundingBalance[msg.sender] + fundingAmount;\\n    }\\n\\n    function withdrawFunds() public nonReentrant {\\n        uint256 balance = fundingBalance[msg.sender];\\n\\n        // Balance should be > 0\\n        require(balance > 0, 'Your funding balance is 0, you have nothing to withdraw');\\n\\n        // Reset staking balance\\n        fundingBalance[msg.sender] = 0;\\n\\n        // Transfer Dai tokens to the sender\\n        TransferHelper.safeTransfer(address(i_link), msg.sender, balance);\\n    }\\n\\n    function swapTokensForTokens(\\n        address receiver,\\n        uint amountIn,\\n        uint amountOutMinimum\\n    ) public {\\n        emit SwapTokensForTokens(receiver, amountIn, amountOutMinimum);\\n\\n        // Approve the router to spend DAI\\n        TransferHelper.safeApprove(i_stakedToken, address(i_swapRouter), amountIn);\\n\\n        // Create the params that will be used to execute the swap\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: i_stakedToken,\\n            tokenOut: i_tradedToken,\\n            fee: feeTier,\\n            recipient: receiver,\\n            deadline: block.timestamp,\\n            amountIn: amountIn,\\n            amountOutMinimum: amountOutMinimum,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        // The call to `exactInputSingle` executes the swap\\n        uint256 amountOut = i_swapRouter.exactInputSingle(params);\\n\\n        // Update user balance\\n        stakingBalance[receiver] = stakingBalance[receiver] - amountIn;\\n        tradingBalance[receiver] = tradingBalance[receiver] + amountOut;\\n\\n        emit TradeOccured(receiver, amountIn, amountOut);\\n    }\\n\\n    function requestPriceAndSwapToken(uint256 botId) public returns (bytes32 requestId) {\\n        string memory fsyms = bytes32ToString(i_stakedTokenSymbol);\\n        string memory tsyms = bytes32ToString(i_tradedTokenSymbol);\\n\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            i_getPriceJobId,\\n            address(this),\\n            this.fulfillPrice.selector\\n        );\\n\\n        // Set the URL to perform the GET request on\\n        req.add(\\n            'get',\\n            string(\\n                abi.encodePacked(\\n                    'https://min-api.cryptocompare.com/data/pricemultifull?fsyms=',\\n                    fsyms,\\n                    '&tsyms=',\\n                    tsyms,\\n                    '&extraParams=Wall-ETH'\\n                )\\n            )\\n        );\\n\\n        // Set the path to find the desired data in the API response ('RAW,ETH,USD,PRICE')\\n        req.add('path', string(abi.encodePacked('RAW,', fsyms, ',', tsyms, ',PRICE')));\\n\\n        // Multiply the result by 10**18 to remove decimals\\n        req.addInt('times', int256(10**18));\\n\\n        // Send the request and save the 'counterId' associated with the 'requestId' returned by the send\\n        requestId = sendChainlinkRequest(req, i_getPriceFee);\\n        requestIdToBotId[requestId] = botId;\\n    }\\n\\n    function fulfillPrice(bytes32 _requestId, uint256 _price) public recordChainlinkFulfillment(_requestId) {\\n        // Emit and Event and set the price\\n        emit FullfillPrice(_requestId, _price);\\n\\n        // Get the botId & the botObj associated with this price request\\n        uint256 botId = requestIdToBotId[_requestId];\\n        BotObj memory botObj = botIdToBotObj[botId];\\n\\n        // If the botObj is empty throw an error\\n        if (botObj.orderSize == 0) {\\n            revert NoCounterIDAssociated(_requestId);\\n        }\\n\\n        // Calculate the minimum amount\\n        uint amountOut = (_price * botObj.orderSize) / 10**18;\\n        uint amountOutMinimum = amountOut - (amountOut * swapSlippage) / 100;\\n\\n        // Calculate order amount adjusted by the inflation (divide by 10^20 because it's a percentage)\\n        int256 inflation = TruflationClient(i_truflationOracle).inflation();\\n        uint256 orderAmount;\\n        if (inflation > 0 && inflation < 50000000000000000000) /* positive and < 50% */\\n        {\\n            orderAmount = botObj.orderSize + ((botObj.orderSize * uint256(inflation)) / 10**20);\\n        } else if (inflation < 0 && inflation > -50000000000000000000) /* negative and > -50% */\\n        {\\n            orderAmount = botObj.orderSize - ((botObj.orderSize * uint256(inflation)) / 10**20);\\n        }\\n        /* equal to zero or +-50% */\\n        else {\\n            orderAmount = botObj.orderSize;\\n        }\\n\\n        // If the user has insufficient funds we use the maximum amount possible\\n        if (stakingBalance[botObj.owner] < orderAmount) {\\n            orderAmount = stakingBalance[botObj.owner];\\n        }\\n\\n        // Swap the tokens\\n        // we use 0 as 'amountOutMinimum' because in the testnet the price of the tokens doesn't actually reflect the real market\\n        swapTokensForTokens(botObj.owner, orderAmount, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x0a95af005534289349b9d79340c8f3baa473846cda7f6af5eb8dbb2baf24f716\",\"license\":\"MIT\"},\"contracts/TruflationClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@chainlink/contracts/src/v0.8/ChainlinkClient.sol';\\nimport '@chainlink/contracts/src/v0.8/ConfirmedOwner.sol';\\n\\ncontract TruflationClient is ChainlinkClient, ConfirmedOwner {\\n    using Chainlink for Chainlink.Request;\\n\\n    address public oracleId;\\n    string public jobId;\\n    uint256 public fee;\\n\\n    int256 public inflation;\\n    uint256 public lastTimeStamp; // in seconds\\n\\n    // Please refer to\\n    // https://github.com/truflation/quickstart/blob/main/network.md\\n    // for oracle address. job id, and fee for a given network\\n\\n    // use this for Goerli (chain: 5)\\n    constructor(\\n        address link_, // 0x326C977E6efc84E512bB9C30f76E30c160eD06FB\\n        address oracleId_, // 0xcf72083697aB8A45905870C387dC93f380f2557b\\n        string memory jobId_, // 8b459447262a4ccf8863962e073576d9\\n        uint256 fee_ // 0,01 LINK\\n    ) ConfirmedOwner(msg.sender) {\\n        setChainlinkToken(link_);\\n\\n        oracleId = oracleId_;\\n        jobId = jobId_;\\n        fee = fee_;\\n    }\\n\\n    // This will require a int256 rather than a uint256 as inflation\\n    // can be negative\\n    function requestInflation() public returns (bytes32 requestId) {\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            bytes32(bytes(jobId)),\\n            address(this),\\n            this.fulfillInflation.selector\\n        );\\n\\n        req.add('service', 'truflation/current');\\n        req.add('keypath', 'yearOverYearInflation');\\n        req.add('abi', 'int256');\\n        req.add('multiplier', '1000000000000000000'); // 10**18\\n\\n        return sendChainlinkRequestTo(oracleId, req, fee);\\n    }\\n\\n    function transferAndRequestInflation() public returns (bytes32 requestId) {\\n        require(\\n            LinkTokenInterface(getChainlinkToken()).transferFrom(msg.sender, address(this), fee),\\n            'transfer failed'\\n        );\\n\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            bytes32(bytes(jobId)),\\n            address(this),\\n            this.fulfillInflation.selector\\n        );\\n\\n        req.add('service', 'truflation/current');\\n        req.add('keypath', 'yearOverYearInflation');\\n        req.add('abi', 'int256');\\n        req.add('multiplier', '1000000000000000000'); // 10**18\\n        req.add('refundTo', Strings.toHexString(uint160(msg.sender), 20));\\n\\n        return sendChainlinkRequestTo(oracleId, req, fee);\\n    }\\n\\n    function fulfillInflation(bytes32 _requestId, bytes memory _inflation)\\n        public\\n        recordChainlinkFulfillment(_requestId)\\n    {\\n        inflation = toInt256(_inflation);\\n        lastTimeStamp = block.timestamp;\\n    }\\n\\n    function toInt256(bytes memory _bytes) internal pure returns (int256 value) {\\n        assembly {\\n            value := mload(add(_bytes, 0x20))\\n        }\\n    }\\n\\n    function changeOracle(address _oracle) public onlyOwner {\\n        oracleId = _oracle;\\n    }\\n\\n    function changeJobId(string memory _jobId) public onlyOwner {\\n        jobId = _jobId;\\n    }\\n\\n    function getChainlinkToken() public view returns (address) {\\n        return chainlinkTokenAddress();\\n    }\\n\\n    function withdrawLink() public onlyOwner {\\n        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\n        require(link.transfer(msg.sender, link.balanceOf(address(this))), 'Unable to transfer');\\n    }\\n}\\n\",\"keccak256\":\"0x654883d831af947883f9295e626ebbbb8d97242262a8ce1e50c3824bcd0ce73a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80637080bf471161010f578063a694fc3a116100a2578063ac8fda1011610071578063ac8fda101461058b578063b48c423b146105a9578063ca1d209d146105c7578063f3b4a67f146105e3576101e5565b8063a694fc3a146104db578063a776fb94146104f7578063aa0ff6801461052b578063ab4578751461055b576101e5565b80637d253aff116100de5780637d253aff146104415780638cdec8221461045f5780638d2a648d1461048f57806390c66660146104ab576101e5565b80637080bf47146103b957806372f5d98a146103d55780637556dfd3146103f357806379851a3414610423576101e5565b806339b394061161018757806345bc78ab1161015657806345bc78ab1461031c57806358fb80541461034c5780635a2b81f51461036a5780636e04ff0d14610388576101e5565b806339b39406146102a6578063442b1278146102c457806345150973146102e25780634585e33b14610300576101e5565b80632a46046a116101c35780632a46046a146102305780632a663606146102605780632def66201461027e5780632e276ffd14610288576101e5565b8063081f4c31146101ea5780631aedeabe1461020857806324600fc314610226575b600080fd5b6101f26105ff565b6040516101ff91906135c0565b60405180910390f35b610210610625565b60405161021d91906135f7565b60405180910390f35b61022e61062a565b005b61024a60048036038101906102459190613688565b610779565b60405161025791906136ea565b60405180910390f35b61026861088d565b6040516102759190613764565b60405180910390f35b6102866108b1565b005b610290610a00565b60405161029d91906135c0565b60405180910390f35b6102ae610a24565b6040516102bb91906135c0565b60405180910390f35b6102cc610a48565b6040516102d991906135c0565b60405180910390f35b6102ea610a6c565b6040516102f791906136ea565b60405180910390f35b61031a600480360381019061031591906137e4565b610a90565b005b61033660048036038101906103319190613831565b611024565b60405161034391906136ea565b60405180910390f35b61035461103c565b604051610361919061387f565b60405180910390f35b610372611060565b60405161037f91906136ea565b60405180910390f35b6103a2600480360381019061039d91906137e4565b611067565b6040516103b0929190613945565b60405180910390f35b6103d360048036038101906103ce9190613b25565b6110d8565b005b6103dd61166f565b6040516103ea9190613bda565b60405180910390f35b61040d60048036038101906104089190613bf5565b611675565b60405161041a9190613c3b565b60405180910390f35b61042b61187a565b6040516104389190613c3b565b60405180910390f35b61044961189e565b6040516104569190613c77565b60405180910390f35b61047960048036038101906104749190613cbe565b6118c2565b60405161048691906136ea565b60405180910390f35b6104a960048036038101906104a49190613ceb565b6118da565b005b6104c560048036038101906104c09190613bf5565b611d7c565b6040516104d291906136ea565b60405180910390f35b6104f560048036038101906104f09190613bf5565b611d94565b005b610511600480360381019061050c9190613bf5565b611e94565b604051610522959493929190613d2b565b60405180910390f35b61054560048036038101906105409190613831565b611eea565b60405161055291906136ea565b60405180910390f35b61057560048036038101906105709190613831565b611f02565b60405161058291906136ea565b60405180910390f35b610593611f1a565b6040516105a09190613c3b565b60405180910390f35b6105b1611f3e565b6040516105be9190613c3b565b60405180910390f35b6105e160048036038101906105dc9190613bf5565b611f62565b005b6105fd60048036038101906105f89190613688565b612062565b005b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a81565b60026000540361066f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066690613ddb565b60405180910390fd5b60026000819055506000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116106fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f590613e6d565b60405180910390fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061076e7f000000000000000000000000000000000000000000000000000000000000000033836123d9565b506001600081905550565b600080610786600761252e565b9050610792600761253c565b61079a6134b3565b85816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508481602001818152505083816040018181525050428160600181815250506000816080018181525050806008600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015590505081925050509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002600054036108f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ed90613ddb565b60405180910390fd5b60026000819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097c90613eff565b60405180910390fd5b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109f57f000000000000000000000000000000000000000000000000000000000000000033836123d9565b506001600081905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008282810190610aa19190613bf5565b90506000600860008381526020019081526020016000209050610ac382612552565b610b0a574281600301546040517fa7586210000000000000000000000000000000000000000000000000000000008152600401610b01929190613f1f565b60405180910390fd5b42816003018190555060018160040154610b249190613f77565b816004018190555062015180600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f3b3b276040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc19190613fc0565b42610bcc9190613fed565b1115610f1e577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc29190613fc0565b6040518363ffffffff1660e01b8152600401610cdf929190614021565b6020604051808303816000875af1158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d229190614076565b50600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db49190613fc0565b600e60008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e229190613fed565b600e60008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e1c5f1e6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1c91906140b8565b505b7f0000000000000000000000000000000000000000000000000000000000000000600e60008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fad9190613fed565b600e60008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061101d82611675565b5050505050565b600c6020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6201518081565b600060606000848481019061107c9190613bf5565b905061108781612552565b925084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509150509250929050565b674563918244f40000836bffffffffffffffffffffffff161015611131576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112890614131565b60405180910390fd5b603c821015611175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116c906141c3565b60405180910390fd5b655af3107a40008110156111be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b590614255565b60405180910390fd5b826bffffffffffffffffffffffff16600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561124e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611245906142e7565b60405180910390fd5b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631865c57d6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156112be573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112e7919061460e565b9250925092506000836000015163ffffffff1690506000611309338888610779565b905060008160405160200161131e91906146a0565b604051602081830303815290604052905060008b308c33858e6000306040516020016113519897969594939291906147a4565b6040516020818303038152906040529050896bffffffffffffffffffffffff16600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113bb9190613fed565b600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000008c600b60009054906101000a900460e01b8560405160200161147e9291906148cd565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016114ab93929190614926565b6020604051808303816000875af11580156114ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ee9190614076565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631865c57d6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561155a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611583919061460e565b8097508198508299505050506000876000015163ffffffff1690506001856115ab9190613f77565b810361162e5760006001436115c09190613fed565b407f0000000000000000000000000000000000000000000000000000000000000000876040516020016115f593929190614a03565b6040516020818303038152906040528051906020012060001c905080600960008781526020019081526020016000208190555050611660565b6040517f6874c3d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050505050565b610bb881565b6000806116a17f000000000000000000000000000000000000000000000000000000000000000061266c565b905060006116ce7f000000000000000000000000000000000000000000000000000000000000000061266c565b905060006117047f000000000000000000000000000000000000000000000000000000000000000030638d2a648d60e01b612807565b90506117716040518060400160405280600381526020017f67657400000000000000000000000000000000000000000000000000000000008152508484604051602001611752929190614b86565b604051602081830303815290604052836128389092919063ffffffff16565b6117dc6040518060400160405280600481526020017f706174680000000000000000000000000000000000000000000000000000000081525084846040516020016117bd929190614caf565b604051602081830303815290604052836128389092919063ffffffff16565b61182e6040518060400160405280600581526020017f74696d6573000000000000000000000000000000000000000000000000000000815250670de0b6b3a76400008361286b9092919063ffffffff16565b611858817f000000000000000000000000000000000000000000000000000000000000000061289e565b935084600a600086815260200190815260200160002081905550505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a6020528060005260406000206000915090505481565b816006600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461197c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197390614d66565b60405180910390fd5b6006600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a27fb96e12cc3e842b19473cb569fb361ed37ce916cd6870f81d591b73828908964c8383604051611a10929190614d86565b60405180910390a16000600a60008581526020019081526020016000205490506000600860008381526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000816040015103611b1957846040517f5d544bc2000000000000000000000000000000000000000000000000000000008152600401611b109190613c3b565b60405180910390fd5b6000670de0b6b3a7640000826040015186611b349190614daf565b611b3e9190614e20565b905060006064600a60ff1683611b549190614daf565b611b5e9190614e20565b82611b699190613fed565b90506000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663be0522e06040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfe9190614e87565b905060008082138015611c1957506802b5e3af16b188000082125b15611c585768056bc75e2d63100000828660400151611c389190614daf565b611c429190614e20565b8560400151611c519190613f77565b9050611ccf565b600082128015611c8757507ffffffffffffffffffffffffffffffffffffffffffffffffd4a1c50e94e78000082135b15611cc65768056bc75e2d63100000828660400151611ca69190614daf565b611cb09190614e20565b8560400151611cbf9190613fed565b9050611cce565b846040015190505b5b80600c6000876000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611d6157600c6000866000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b611d718560000151826000612062565b505050505050505050565b60096020528060005260406000206000915090505481565b60008111611dd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dce90614f00565b60405180910390fd5b611e037f00000000000000000000000000000000000000000000000000000000000000003330846128d5565b80600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e4e9190613f77565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60086020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154905085565b600e6020528060005260406000206000915090505481565b600d6020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008111611fa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9c90614f00565b60405180910390fd5b611fd17f00000000000000000000000000000000000000000000000000000000000000003330846128d5565b80600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461201c9190613f77565b600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b7ff4ec58065cfc6a2c8ef3beb140ad8d5a657958bf8a1ddd9ba948db8c8a1f21aa83838360405161209593929190614f20565b60405180910390a16120e87f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084612a2d565b60006040518061010001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001428152602001848152602001838152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389836040518263ffffffff1660e01b81526004016122219190615035565b6020604051808303816000875af1158015612240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122649190613fc0565b905083600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b19190613fed565b600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461233f9190613f77565b600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff167fbdf4670c78c4b5249397eb82e2e0e8ba29705683621ddb1c4742f24827ca807c85836040516123ca929190613f1f565b60405180910390a25050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b858560405160240161240e929190614021565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516124789190615051565b6000604051808303816000865af19150503d80600081146124b5576040519150601f19603f3d011682016040523d82523d6000602084013e6124ba565b606091505b50915091508180156124e857506000815114806124e75750808060200190518101906124e69190614076565b5b5b612527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251e906150b4565b60405180910390fd5b5050505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600080600860008481526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000816020015182606001514261260a9190613fed565b119050600080600c6000856000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054149050818015612662575080155b9350505050919050565b606060005b60208160ff161080156126c35750600060f81b838260ff166020811061269a576126996150d4565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156126db5780806126d390615103565b915050612671565b60008160ff1667ffffffffffffffff8111156126fa576126f961397a565b5b6040519080825280601f01601f19166020018201604052801561272c5781602001600182028036833780820191505090505b509050600091505b60208260ff161080156127865750600060f81b848360ff166020811061275d5761275c6150d4565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156127fd57838260ff16602081106127a1576127a06150d4565b5b1a60f81b818360ff16815181106127bb576127ba6150d4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081806127f590615103565b925050612734565b8092505050919050565b61280f6134f8565b6128176134f8565b61282e85858584612b82909392919063ffffffff16565b9150509392505050565b61284f828460800151612c3290919063ffffffff16565b612866818460800151612c3290919063ffffffff16565b505050565b612882828460800151612c3290919063ffffffff16565b612899818460800151612c5790919063ffffffff16565b505050565b60006128cd600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484612d04565b905092915050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161290c9392919061512c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516129769190615051565b6000604051808303816000865af19150503d80600081146129b3576040519150601f19603f3d011682016040523d82523d6000602084013e6129b8565b606091505b50915091508180156129e657506000815114806129e55750808060200190518101906129e49190614076565b5b5b612a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1c906151af565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401612a62929190614021565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612acc9190615051565b6000604051808303816000865af19150503d8060008114612b09576040519150601f19603f3d011682016040523d82523d6000602084013e612b0e565b606091505b5091509150818015612b3c5750600081511480612b3b575080806020019051810190612b3a9190614076565b5b5b612b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b729061521b565b60405180910390fd5b5050505050565b612b8a6134f8565b612b9a8560800151610100612dd0565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b612c3f8260038351612e3a565b612c528183612fbf90919063ffffffff16565b505050565b7fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000811215612c8e57612c898282612fe1565b612d00565b67ffffffffffffffff811315612cad57612ca88282613058565b612cff565b60008112612cc657612cc182600083612e3a565b612cfe565b612cfd826001837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612cf8919061523b565b612e3a565b5b5b5b5050565b6000806005549050600181612d199190613f77565b6005819055506000634042994660e01b60008087600001513089604001518760018c6080015160000151604051602401612d5a98979695949392919061528d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050612dc5868386846130a4565b925050509392505050565b612dd8613565565b6000602083612de79190615312565b14612e1357602082612df99190615312565b6020612e059190613fed565b82612e109190613f77565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611612e7157612e6b8160058460ff16901b60ff16178461323990919063ffffffff16565b50612fba565b60ff8167ffffffffffffffff1611612ec757612ea0601860058460ff16901b178461323990919063ffffffff16565b50612ec18167ffffffffffffffff166001856132599092919063ffffffff16565b50612fb9565b61ffff8167ffffffffffffffff1611612f1e57612ef7601960058460ff16901b178461323990919063ffffffff16565b50612f188167ffffffffffffffff166002856132599092919063ffffffff16565b50612fb8565b63ffffffff8167ffffffffffffffff1611612f7757612f50601a60058460ff16901b178461323990919063ffffffff16565b50612f718167ffffffffffffffff166004856132599092919063ffffffff16565b50612fb7565b612f94601b60058460ff16901b178461323990919063ffffffff16565b50612fb58167ffffffffffffffff166008856132599092919063ffffffff16565b505b5b5b5b505050565b612fc7613565565b612fd98384600001515184855161327b565b905092915050565b612fff60036005600660ff16901b178361323990919063ffffffff16565b5061305482827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff613030919061523b565b60405160200161304091906136ea565b60405160208183030381529060405261336a565b5050565b61307660026005600660ff16901b178361323990919063ffffffff16565b506130a0828260405160200161308c91906136ea565b60405160208183030381529060405261336a565b5050565b600030846040516020016130b992919061536c565b604051602081830303815290604052805190602001209050846006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b81526004016131af93929190615398565b6020604051808303816000875af11580156131ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f29190614076565b613231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322890615448565b60405180910390fd5b949350505050565b613241613565565b613251838460000151518461338f565b905092915050565b613261613565565b6132728485600001515185856133e5565b90509392505050565b613283613565565b825182111561329157600080fd5b846020015182856132a29190613f77565b11156132d7576132d68560026132c7886020015188876132c29190613f77565b613473565b6132d19190614daf565b61348f565b5b6000808651805187602083010193508088870111156132f65787860182525b60208701925050505b6020841061333d57805182526020826133189190613f77565b91506020816133279190613f77565b90506020846133369190613fed565b93506132ff565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6133778260028351612e3a565b61338a8183612fbf90919063ffffffff16565b505050565b613397613565565b836020015183106133bd576133bc84600286602001516133b79190614daf565b61348f565b5b835180516020858301018481538186036133d8576001820183525b5050508390509392505050565b6133ed613565565b846020015184836133fe9190613f77565b11156134265761342585600286856134169190613f77565b6134209190614daf565b61348f565b5b6000600183610100613438919061559b565b6134429190613fed565b905085518386820101858319825116178152815185880111156134655784870182525b505085915050949350505050565b60008183111561348557829050613489565b8190505b92915050565b6000826000015190506134a28383612dd0565b506134ad8382612fbf565b50505050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161355f613565565b81525090565b604051806040016040528060608152602001600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135aa8261357f565b9050919050565b6135ba8161359f565b82525050565b60006020820190506135d560008301846135b1565b92915050565b600060ff82169050919050565b6135f1816135db565b82525050565b600060208201905061360c60008301846135e8565b92915050565b6000604051905090565b600080fd5b600080fd5b61362f8161359f565b811461363a57600080fd5b50565b60008135905061364c81613626565b92915050565b6000819050919050565b61366581613652565b811461367057600080fd5b50565b6000813590506136828161365c565b92915050565b6000806000606084860312156136a1576136a061361c565b5b60006136af8682870161363d565b93505060206136c086828701613673565b92505060406136d186828701613673565b9150509250925092565b6136e481613652565b82525050565b60006020820190506136ff60008301846136db565b92915050565b6000819050919050565b600061372a6137256137208461357f565b613705565b61357f565b9050919050565b600061373c8261370f565b9050919050565b600061374e82613731565b9050919050565b61375e81613743565b82525050565b60006020820190506137796000830184613755565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126137a4576137a361377f565b5b8235905067ffffffffffffffff8111156137c1576137c0613784565b5b6020830191508360018202830111156137dd576137dc613789565b5b9250929050565b600080602083850312156137fb576137fa61361c565b5b600083013567ffffffffffffffff81111561381957613818613621565b5b6138258582860161378e565b92509250509250929050565b6000602082840312156138475761384661361c565b5b60006138558482850161363d565b91505092915050565b600061386982613731565b9050919050565b6138798161385e565b82525050565b60006020820190506138946000830184613870565b92915050565b60008115159050919050565b6138af8161389a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156138ef5780820151818401526020810190506138d4565b60008484015250505050565b6000601f19601f8301169050919050565b6000613917826138b5565b61392181856138c0565b93506139318185602086016138d1565b61393a816138fb565b840191505092915050565b600060408201905061395a60008301856138a6565b818103602083015261396c818461390c565b90509392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6139b2826138fb565b810181811067ffffffffffffffff821117156139d1576139d061397a565b5b80604052505050565b60006139e4613612565b90506139f082826139a9565b919050565b600067ffffffffffffffff821115613a1057613a0f61397a565b5b613a19826138fb565b9050602081019050919050565b82818337600083830152505050565b6000613a48613a43846139f5565b6139da565b905082815260208101848484011115613a6457613a63613975565b5b613a6f848285613a26565b509392505050565b600082601f830112613a8c57613a8b61377f565b5b8135613a9c848260208601613a35565b91505092915050565b600063ffffffff82169050919050565b613abe81613aa5565b8114613ac957600080fd5b50565b600081359050613adb81613ab5565b92915050565b60006bffffffffffffffffffffffff82169050919050565b613b0281613ae1565b8114613b0d57600080fd5b50565b600081359050613b1f81613af9565b92915050565b600080600080600060a08688031215613b4157613b4061361c565b5b600086013567ffffffffffffffff811115613b5f57613b5e613621565b5b613b6b88828901613a77565b9550506020613b7c88828901613acc565b9450506040613b8d88828901613b10565b9350506060613b9e88828901613673565b9250506080613baf88828901613673565b9150509295509295909350565b600062ffffff82169050919050565b613bd481613bbc565b82525050565b6000602082019050613bef6000830184613bcb565b92915050565b600060208284031215613c0b57613c0a61361c565b5b6000613c1984828501613673565b91505092915050565b6000819050919050565b613c3581613c22565b82525050565b6000602082019050613c506000830184613c2c565b92915050565b6000613c6182613731565b9050919050565b613c7181613c56565b82525050565b6000602082019050613c8c6000830184613c68565b92915050565b613c9b81613c22565b8114613ca657600080fd5b50565b600081359050613cb881613c92565b92915050565b600060208284031215613cd457613cd361361c565b5b6000613ce284828501613ca9565b91505092915050565b60008060408385031215613d0257613d0161361c565b5b6000613d1085828601613ca9565b9250506020613d2185828601613673565b9150509250929050565b600060a082019050613d4060008301886135b1565b613d4d60208301876136db565b613d5a60408301866136db565b613d6760608301856136db565b613d7460808301846136db565b9695505050505050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613dc5601f83613d7e565b9150613dd082613d8f565b602082019050919050565b60006020820190508181036000830152613df481613db8565b9050919050565b7f596f75722066756e64696e672062616c616e636520697320302c20796f75206860008201527f617665206e6f7468696e6720746f207769746864726177000000000000000000602082015250565b6000613e57603783613d7e565b9150613e6282613dfb565b604082019050919050565b60006020820190508181036000830152613e8681613e4a565b9050919050565b7f596f7572207374616b652062616c616e636520697320302c20796f752068617660008201527f65206e6f7468696e6720746f2077697468647261770000000000000000000000602082015250565b6000613ee9603583613d7e565b9150613ef482613e8d565b604082019050919050565b60006020820190508181036000830152613f1881613edc565b9050919050565b6000604082019050613f3460008301856136db565b613f4160208301846136db565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613f8282613652565b9150613f8d83613652565b9250828201905080821115613fa557613fa4613f48565b5b92915050565b600081519050613fba8161365c565b92915050565b600060208284031215613fd657613fd561361c565b5b6000613fe484828501613fab565b91505092915050565b6000613ff882613652565b915061400383613652565b925082820390508181111561401b5761401a613f48565b5b92915050565b600060408201905061403660008301856135b1565b61404360208301846136db565b9392505050565b6140538161389a565b811461405e57600080fd5b50565b6000815190506140708161404a565b92915050565b60006020828403121561408c5761408b61361c565b5b600061409a84828501614061565b91505092915050565b6000815190506140b281613c92565b92915050565b6000602082840312156140ce576140cd61361c565b5b60006140dc848285016140a3565b91505092915050565b7f6d696e696d756d2066756e64696e67416d6f756e742069732035204c494e4b00600082015250565b600061411b601f83613d7e565b9150614126826140e5565b602082019050919050565b6000602082019050818103600083015261414a8161410e565b9050919050565b7f6d696e696d756d206f72646572496e74657276616c206973203630207365636f60008201527f6e64730000000000000000000000000000000000000000000000000000000000602082015250565b60006141ad602383613d7e565b91506141b882614151565b604082019050919050565b600060208201905081810360008301526141dc816141a0565b9050919050565b7f6d696e696d756d206f7264657253697a6520697320302c30303031207374616b60008201527f6564546f6b656e00000000000000000000000000000000000000000000000000602082015250565b600061423f602783613d7e565b915061424a826141e3565b604082019050919050565b6000602082019050818103600083015261426e81614232565b9050919050565b7f796f75722066756e64696e672062616c616e6365206973203c206f6620796f7560008201527f722066756e64696e67416d6f756e740000000000000000000000000000000000602082015250565b60006142d1602f83613d7e565b91506142dc82614275565b604082019050919050565b60006020820190508181036000830152614300816142c4565b9050919050565b600080fd5b60008151905061431b81613ab5565b92915050565b60008151905061433081613af9565b92915050565b60006080828403121561434c5761434b614307565b5b61435660806139da565b905060006143668482850161430c565b600083015250602061437a84828501614321565b602083015250604061438e84828501613fab565b60408301525060606143a284828501613fab565b60608301525092915050565b6143b781613bbc565b81146143c257600080fd5b50565b6000815190506143d4816143ae565b92915050565b600061ffff82169050919050565b6143f1816143da565b81146143fc57600080fd5b50565b60008151905061440e816143e8565b92915050565b60008151905061442381613626565b92915050565b600061018082840312156144405761443f614307565b5b61444b6101806139da565b9050600061445b8482850161430c565b600083015250602061446f8482850161430c565b6020830152506040614483848285016143c5565b60408301525060606144978482850161430c565b60608301525060806144ab848285016143c5565b60808301525060a06144bf848285016143ff565b60a08301525060c06144d384828501614321565b60c08301525060e06144e78482850161430c565b60e0830152506101006144fc84828501613fab565b6101008301525061012061451284828501613fab565b6101208301525061014061452884828501614414565b6101408301525061016061453e84828501614414565b6101608301525092915050565b600067ffffffffffffffff8211156145665761456561397a565b5b602082029050602081019050919050565b600061458a6145858461454b565b6139da565b905080838252602082019050602084028301858111156145ad576145ac613789565b5b835b818110156145d657806145c28882614414565b8452602084019350506020810190506145af565b5050509392505050565b600082601f8301126145f5576145f461377f565b5b8151614605848260208601614577565b91505092915050565b600080600061022084860312156146285761462761361c565b5b600061463686828701614336565b935050608061464786828701614429565b92505061020084015167ffffffffffffffff81111561466957614668613621565b5b614675868287016145e0565b9150509250925092565b6000819050919050565b61469a61469582613652565b61467f565b82525050565b60006146ac8284614689565b60208201915081905092915050565b600081519050919050565b60006146d1826146bb565b6146db8185613d7e565b93506146eb8185602086016138d1565b6146f4816138fb565b840191505092915050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b6000614735600283613d7e565b9150614740826146ff565b602082019050919050565b61475481613aa5565b82525050565b61476381613ae1565b82525050565b6000819050919050565b600061478e61478961478484614769565b613705565b6135db565b9050919050565b61479e81614773565b82525050565b60006101208201905081810360008301526147bf818b6146c6565b905081810360208301526147d281614728565b90506147e1604083018a6135b1565b6147ee606083018961474b565b6147fb60808301886135b1565b81810360a083015261480d818761390c565b905061481c60c083018661475a565b61482960e0830185614795565b6148376101008301846135b1565b9998505050505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b61488b61488682614844565b614870565b82525050565b600081905092915050565b60006148a7826138b5565b6148b18185614891565b93506148c18185602086016138d1565b80840191505092915050565b60006148d9828561487a565b6004820191506148e9828461489c565b91508190509392505050565b600061491061490b61490684613ae1565b613705565b613652565b9050919050565b614920816148f5565b82525050565b600060608201905061493b60008301866135b1565b6149486020830185614917565b818103604083015261495a818461390c565b9050949350505050565b6000819050919050565b61497f61497a82613c22565b614964565b82525050565b60008160601b9050919050565b600061499d82614985565b9050919050565b60006149af82614992565b9050919050565b6149c76149c28261359f565b6149a4565b82525050565b60008160e01b9050919050565b60006149e5826149cd565b9050919050565b6149fd6149f882613aa5565b6149da565b82525050565b6000614a0f828661496e565b602082019150614a1f82856149b6565b601482019150614a2f82846149ec565b600482019150819050949350505050565b600081905092915050565b7f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f60008201527f6d2f646174612f70726963656d756c746966756c6c3f6673796d733d00000000602082015250565b6000614aa7603c83614a40565b9150614ab282614a4b565b603c82019050919050565b6000614ac8826146bb565b614ad28185614a40565b9350614ae28185602086016138d1565b80840191505092915050565b7f267473796d733d00000000000000000000000000000000000000000000000000600082015250565b6000614b24600783614a40565b9150614b2f82614aee565b600782019050919050565b7f266578747261506172616d733d57616c6c2d4554480000000000000000000000600082015250565b6000614b70601583614a40565b9150614b7b82614b3a565b601582019050919050565b6000614b9182614a9a565b9150614b9d8285614abd565b9150614ba882614b17565b9150614bb48284614abd565b9150614bbf82614b63565b91508190509392505050565b7f5241572c00000000000000000000000000000000000000000000000000000000600082015250565b6000614c01600483614a40565b9150614c0c82614bcb565b600482019050919050565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b6000614c4d600183614a40565b9150614c5882614c17565b600182019050919050565b7f2c50524943450000000000000000000000000000000000000000000000000000600082015250565b6000614c99600683614a40565b9150614ca482614c63565b600682019050919050565b6000614cba82614bf4565b9150614cc68285614abd565b9150614cd182614c40565b9150614cdd8284614abd565b9150614ce882614c8c565b91508190509392505050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b6000614d50602883613d7e565b9150614d5b82614cf4565b604082019050919050565b60006020820190508181036000830152614d7f81614d43565b9050919050565b6000604082019050614d9b6000830185613c2c565b614da860208301846136db565b9392505050565b6000614dba82613652565b9150614dc583613652565b9250828202614dd381613652565b91508282048414831517614dea57614de9613f48565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614e2b82613652565b9150614e3683613652565b925082614e4657614e45614df1565b5b828204905092915050565b6000819050919050565b614e6481614e51565b8114614e6f57600080fd5b50565b600081519050614e8181614e5b565b92915050565b600060208284031215614e9d57614e9c61361c565b5b6000614eab84828501614e72565b91505092915050565b7f616d6f756e742073686f756c64206265203e2030000000000000000000000000600082015250565b6000614eea601483613d7e565b9150614ef582614eb4565b602082019050919050565b60006020820190508181036000830152614f1981614edd565b9050919050565b6000606082019050614f3560008301866135b1565b614f4260208301856136db565b614f4f60408301846136db565b949350505050565b614f608161359f565b82525050565b614f6f81613bbc565b82525050565b614f7e81613652565b82525050565b614f8d8161357f565b82525050565b61010082016000820151614faa6000850182614f57565b506020820151614fbd6020850182614f57565b506040820151614fd06040850182614f66565b506060820151614fe36060850182614f57565b506080820151614ff66080850182614f75565b5060a082015161500960a0850182614f75565b5060c082015161501c60c0850182614f75565b5060e082015161502f60e0850182614f84565b50505050565b60006101008201905061504b6000830184614f93565b92915050565b600061505d828461489c565b915081905092915050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b600061509e600283613d7e565b91506150a982615068565b602082019050919050565b600060208201905081810360008301526150cd81615091565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061510e826135db565b915060ff820361512157615120613f48565b5b600182019050919050565b600060608201905061514160008301866135b1565b61514e60208301856135b1565b61515b60408301846136db565b949350505050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6000615199600383613d7e565b91506151a482615163565b602082019050919050565b600060208201905081810360008301526151c88161518c565b9050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b6000615205600283613d7e565b9150615210826151cf565b602082019050919050565b60006020820190508181036000830152615234816151f8565b9050919050565b600061524682614e51565b915061525183614e51565b925082820390508181126000841216828213600085121516171561527857615277613f48565b5b92915050565b61528781614844565b82525050565b6000610100820190506152a3600083018b6135b1565b6152b0602083018a6136db565b6152bd6040830189613c2c565b6152ca60608301886135b1565b6152d7608083018761527e565b6152e460a08301866136db565b6152f160c08301856136db565b81810360e0830152615303818461390c565b90509998505050505050505050565b600061531d82613652565b915061532883613652565b92508261533857615337614df1565b5b828206905092915050565b600061534e82613731565b9050919050565b61536661536182615343565b6149a4565b82525050565b60006153788285615355565b6014820191506153888284614689565b6020820191508190509392505050565b60006060820190506153ad60008301866135b1565b6153ba60208301856136db565b81810360408301526153cc818461390c565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b6000615432602383613d7e565b915061543d826153d6565b604082019050919050565b6000602082019050818103600083015261546181615425565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156154bf5780860481111561549b5761549a613f48565b5b60018516156154aa5780820291505b80810290506154b885615468565b945061547f565b94509492505050565b6000826154d85760019050615594565b816154e65760009050615594565b81600181146154fc576002811461550657615535565b6001915050615594565b60ff84111561551857615517613f48565b5b8360020a91508482111561552f5761552e613f48565b5b50615594565b5060208310610133831016604e8410600b841016171561556a5782820a90508381111561556557615564613f48565b5b615594565b6155778484846001615475565b9250905081840481111561558e5761558d613f48565b5b81810290505b9392505050565b60006155a682613652565b91506155b183613652565b92506155de7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846154c8565b90509291505056fea2646970667358221220388b3b25c89db6a1ca01081e0b7339bebb6c97d5e01f43903e9517d9a936061f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2615,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 358,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "s_ens",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ENSInterface)1387"
      },
      {
        "astId": 360,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 363,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "s_link",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(LinkTokenInterface)1482"
      },
      {
        "astId": 366,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "s_oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(OperatorInterface)1562"
      },
      {
        "astId": 369,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 373,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 5757,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "_botIdCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)3361_storage"
      },
      {
        "astId": 5762,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "botIdToBotObj",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(BotObj)5641_storage)"
      },
      {
        "astId": 5766,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "botIdToUpkeepId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5770,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "requestIdToBotId",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5783,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "registerSig",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes4"
      },
      {
        "astId": 5798,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "stakingBalance",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5802,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "tradingBalance",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5806,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "fundingBalance",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5812,
        "contract": "contracts/TradingBotV3.sol:TradingBotV3",
        "label": "i_truflationOracle",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(ENSInterface)1387": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1482": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1562": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(BotObj)5641_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BotObj)",
        "numberOfBytes": "32",
        "value": "t_struct(BotObj)5641_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BotObj)5641_storage": {
        "encoding": "inplace",
        "label": "struct BotObj",
        "members": [
          {
            "astId": 5632,
            "contract": "contracts/TradingBotV3.sol:TradingBotV3",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5634,
            "contract": "contracts/TradingBotV3.sol:TradingBotV3",
            "label": "orderInterval",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5636,
            "contract": "contracts/TradingBotV3.sol:TradingBotV3",
            "label": "orderSize",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5638,
            "contract": "contracts/TradingBotV3.sol:TradingBotV3",
            "label": "lastTimeStamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5640,
            "contract": "contracts/TradingBotV3.sol:TradingBotV3",
            "label": "counter",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Counter)3361_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3360,
            "contract": "contracts/TradingBotV3.sol:TradingBotV3",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}